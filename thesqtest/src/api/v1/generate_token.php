<?php
require_once "apiconnect.php";

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

require "../../vendor/autoload.php";
$apiContext = require 'bootstrap.php';


function dumpFile($var, $name, $mode='w'){
    ob_start();
    print_r($var);
    $data = ob_get_clean();
    $fp = fopen($name, $mode);
    fwrite($fp, $data);
    fclose($fp);
}

function notify_webmaster($msg, $id, $createdAt) {
    $admin_mail = "admin@thesqtest.com";

    $mail = new PHPMailer();
    $mail->IsSMTP(); // enable SMTP
    $mail->SMTPDebug = 0;  // debugging: 1 = errors and messages, 2 = messages only
    $mail->SMTPAuth = true;  // authentication enabled
    $mail->SMTPSecure = 'ssl'; // secure transfer enabled REQUIRED for GMail
    $mail->Host = 'thesqtest.com';
    $mail->Port = 465;
    $mail->Username = 'admin@thesqtest.com';
    $mail->Password = 'adminunited33';
    $mail->setFrom("admin@thesqtest.com", "SQ Test");
    $mail->addAddress($admin_mail);
    $mail->Subject = 'Email from SQTest '. $id;
    $mail->Body = "$msg for ID: $id created at $createdAt";
    return $mail->send();
}

function send_email()
{
    global $name;
    global $email;
    global $tokens;
    global $total_token;

    if ($total_token == 1) {
        $token = $tokens[0];
        $link = "http://thesqtest.com/index.php?token=$token\n";
    } else {
        for ($i = 0; $i < count($tokens); $i++) {
            $token = $tokens[$i];
            $link .= ($i + 1) . ". http://thesqtest.com/index.php?token=$token\n";
        }
    }

    $mail = new PHPMailer();
    $mail->IsSMTP(); // enable SMTP
    $mail->SMTPDebug = 0;  // debugging: 1 = errors and messages, 2 = messages only
    $mail->SMTPAuth = true;  // authentication enabled
    $mail->SMTPSecure = 'ssl'; // secure transfer enabled REQUIRED for GMail
    $mail->Host = 'thesqtest.com';
    $mail->Port = 465;
    $mail->Username = 'admin@thesqtest.com';
    $mail->Password = 'adminunited33';
    $mail->setFrom("admin@thesqtest.com", "SQ Test");
    $mail->addAddress($email);
    $mail->Subject = 'Token for test';
    $mail->Body = "Dear $name\n\nHere is your token for taking the SQ Test\n$link\nLooking forward to have you taking the SQ Test.\nBest Wishes!";
    return $mail->send();
}

function send_admin_email()
{
    global $name;
    global $email;

    $admin_mail = "dzohar@danahzohar.com";

    $mail = new PHPMailer();
    $mail->IsSMTP(); // enable SMTP
    $mail->SMTPDebug = 0;  // debugging: 1 = errors and messages, 2 = messages only
    $mail->SMTPAuth = true;  // authentication enabled
    $mail->SMTPSecure = 'ssl'; // secure transfer enabled REQUIRED for GMail
    $mail->Host = 'thesqtest.com';
    $mail->Port = 465;
    $mail->Username = 'admin@thesqtest.com';
    $mail->Password = 'adminunited33';
    $mail->setFrom("admin@thesqtest.com", "SQ Test");
    $mail->addAddress($admin_mail);
    $mail->Subject = 'New Registrant ' . $name . ' for SQTest';
    $mail->Body = "Dear Danah,\n\n$name just received a token to take the SQTest. Kindly contact the registrant on $email if need be.\n\nBest!\n\n\nThis email is autogenerated and should not be replied to!";
    return $mail->send();
}

        
/** @var String $requestBody */
$requestBody = file_get_contents('php://input');

/**
 * Receive HTTP headers that you received from PayPal webhook.
 * Just uncomment the below line to read the data from actual request.
 */
/** @var Array $headers */
$headers = getallheaders();

/**
 * In Documentions https://developer.paypal.com/docs/api/webhooks/#verify-webhook-signature_post
 * All header keys as UPPERCASE, but I recive the header key as the example array, First letter as UPPERCASE
 */
$headers = array_change_key_case($headers, CASE_UPPER);

$signatureVerification = new \PayPal\Api\VerifyWebhookSignature();
$signatureVerification->setAuthAlgo($headers['PAYPAL-AUTH-ALGO']);
$signatureVerification->setTransmissionId($headers['PAYPAL-TRANSMISSION-ID']);
$signatureVerification->setCertUrl($headers['PAYPAL-CERT-URL']);
$signatureVerification->setWebhookId("4T453129AY3670010"); // Note that the Webhook ID must be a currently valid Webhook that you created with your client ID/secret.
$signatureVerification->setTransmissionSig($headers['PAYPAL-TRANSMISSION-SIG']);
$signatureVerification->setTransmissionTime($headers['PAYPAL-TRANSMISSION-TIME']);

$signatureVerification->setRequestBody($requestBody);
$request = clone $signatureVerification;

try {
    /** @var \PayPal\Api\VerifyWebhookSignatureResponse $output */
    $output = $signatureVerification->post($apiContext);
    $vStatus = $output->getVerificationStatus() === "SUCCESS" ? true : false;
    $body = json_decode($request->toArray()["request_body"],true);
    $eventType = $body["event_type"];
    if ($eventType === "PAYMENT.CAPTURE.COMPLETED") {
        $id = $body["id"];
        $resource = $body["resource"];
        $createdAt = $body["create_time"];
        $summary = $body["summary"];
        $link = $resource['links'][2]['href'];
        $orderId = basename($link);
        
    
        $result = \PayPal\Api\Order::get($orderId, $apiContext)->toArray();
        $payer = $result["payer"];
        $name = join(" ", $payer["name"]);
        $email = $payer["email_address"];
        $status = $result["status"];
       
        // TODO: Store in paypal transactions db
        $query = "SELECT status, order_id FROM paypal_events WHERE id='$id'";
        $rows = $conn->query($query);
        if ($rows->num_rows > 0) {
            $data = $rows->fetch_assoc();
            if ($data['status'] && $data['order_id'] === $orderId){
                notify_webmaster("Already delivered " . $summary, 'for order ID:'. $orderId. ' and hook ID: ' .$id, $createdAt);
                die('already delivered');
            }
        }
        $query = "INSERT INTO paypal_events (id, created_at,summary, status,order_id, name, email) VALUES ('$id','$createdAt','$summary','0','$orderId','$name','$email')";
        $conn->query($query);

        if ($vStatus && $status === "COMPLETED") {
            $total_token = intval(1);
            $tokens = [];

            for ($i = 0; $i < $total_token; $i++) {
                $date = new Datetime("now");
                $token = md5($date->format('U') . $i);
                $query = "INSERT INTO user (token,email ,name) VALUES ('$token','','$name')";
                $conn->query($query);
                array_push($tokens, $token);
            }
            
            send_email();
            $query = "UPDATE paypal_events SET status='1' WHERE id='$id'";
            $conn->query($query);
            send_admin_email();
            notify_webmaster("Success for " . $summary, 'for order ID:'. $orderId. ' and hook ID: ' .$id, $createdAt);
            
        } else
            notify_webmaster("Failure for " . $summary, 'for order ID:'. $orderId. ' and hook ID: ' .$id, $createdAt);
    }

    if (!$vStatus) {
        dumpFile('\nFailed to verify', 'errors','a');
        die('Not verified');
    }
} catch (PayPalHttp\HttpException $e) {
    dumpFile($e->getData(), 'errors','a');
       notify_webmaster("Major error occured " . $e->getData(), "", (new Datetime("now"))->format('D M d, Y G:i'));
} catch (PayPal\Exception\PayPalConnectionException $e) {
    dumpFile($e->getData(), 'errors','a');
       notify_webmaster("Major error occured " . $e->getData(), "", (new Datetime("now"))->format('D M d, Y G:i'));
} catch (Exception $e) {
    dumpFile($e->getMessage(), 'errors','a');
    notify_webmaster("Major error occured " . $e->getMessage(), "", (new Datetime("now"))->format('D M d, Y G:i'));
} finally {
   
}
    
    
   
       